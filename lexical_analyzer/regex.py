from lexical_analyzer.categories import Categories


REGEX = {
    Categories.BOOL: r"bool",
    Categories.CHAR: r"char",
    Categories.INT: r"int",
    Categories.FLOAT: r"float",
    Categories.STRING: r"string",
    Categories.VOID: r"void",
    Categories.CONSTANTE: r"const",
        Categories.INDICE: r"\[((\d+)|([_a-zA-Z][_a-zA-Z0-9]*))\]",
    Categories.MAIN: r"main",
    Categories.RETORNO: r"return",
    Categories.IF: r"if",
    Categories.ELSE: r"else",
    Categories.PRINT: r"print",
    Categories.L_STR: r"\"[\x00-\x7F]*\"",
    Categories.L_CHAR: r"'[\x00-\x7F]'",
    Categories.L_INT: r"\d+",
    Categories.L_FLOAT: r"\d+\.\d+",
    Categories.L_BOOL: r"true|false",
    Categories.VIRGULA: r"\,",
    Categories.P_VIRG: r";",
    Categories.A_CHAVE: r"\{",
    Categories.F_CHAVE: r"\}",
    Categories.A_PARENT: r"\(",
    Categories.F_PARENT: r"\)",
    Categories.WHILE: r"while",
    Categories.SCAN: r"scan",
    Categories.FOR: r"for",
    Categories.OP_CON: r"::",
    Categories.OP_OU: r"\|\|",
    Categories.OP_E: r"&&",
    Categories.OP_MA_IG: r">=",
    Categories.OP_ME_IG: r"<=",
    Categories.OP_MAIOR: r">",
    Categories.OP_MENOR: r"<",
    Categories.OP_IGUAL: r"=",
    Categories.OP_ADIC: r"\+",
    Categories.OP_SUB: r"-",
    Categories.ARR_UNDM: r"\[\]",
    Categories.DEREF_MULT: r"\*",
    Categories.OP_DIV: r"/",
    Categories.OP_RESTO: r"%",
    Categories.OP_NEG: r"!",
    Categories.IDENTIFI: r"[_a-zA-Z][_a-zA-Z0-9]*",
    Categories.DOIS_PONT: r":",
    Categories.OP_REF: r"&",
}

